@page "/weather"
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>Weather</PageTitle>

<div class="container-bg"></div>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

<button class="button" @onclick="GoBack">
    <svg class="svgIcon" viewBox="0 0 384 512">
        <path d="M214.6 41.4c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 141.2V448c0 17.7 14.3 32 32 32s32-14.3
         32-32V141.l2L329 .4 ,246 .6 c +00 ,+00 ,.9,+00 ,.9,+00 ,
        s -.9 ,-20 .,9 ,-20 .
        ">
        </path>
    </svg>
    Вернуться обратно
</button>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }
}
